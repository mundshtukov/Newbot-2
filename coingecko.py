import aiohttp
import json
import asyncio
import logging
from datetime import datetime, timedelta
from config import COINGECKO_API_URL, BINANCE_API_URL, EXCLUDED_COINS, CACHE_FILE, CACHE_HOURS, get_current_proxy, rotate_proxy
import os

logger = logging.getLogger(__name__)


async def make_request_with_proxy(url, params=None, timeout=10, weight=1):
    """–î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
    from config import record_proxy_usage, load_proxy_list
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json'
    }

    proxy = get_current_proxy()
    
    # –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é
    if not proxy:
        logger.info("üåê –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –¥–µ–ª–∞–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å")
        try:
            async with aiohttp.ClientSession(
                    timeout=aiohttp.ClientTimeout(total=timeout)) as session:
                async with session.get(url, params=params, headers=headers) as response:
                    return {
                        'status': response.status,
                        'data': await response.json() if response.status == 200 else None
                    }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise e
    
    try:
        connector = aiohttp.TCPConnector()
        logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏: {proxy}")

        async with aiohttp.ClientSession(
                connector=connector,
                timeout=aiohttp.ClientTimeout(total=timeout)) as session:
            async with session.get(url,
                                   params=params,
                                   headers=headers,
                                   proxy=proxy) as response:
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                record_proxy_usage(proxy, weight=weight, error=False)
                
                result = {
                    'status': response.status,
                    'data': await response.json() if response.status == 200 else None
                }
                
                if response.status == 200:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ (weight: {weight})")
                
                return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–æ–∫—Å–∏ {proxy}: {e}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        record_proxy_usage(proxy, weight=weight, error=True)
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
        load_proxy_list()
        
        # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø—Ä–æ–∫—Å–∏
        if rotate_proxy():
            logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –¥—Ä—É–≥–∏–º –ø—Ä–æ–∫—Å–∏...")
            new_proxy = get_current_proxy()
            if new_proxy and new_proxy != proxy:
                try:
                    async with aiohttp.ClientSession(
                            connector=aiohttp.TCPConnector(),
                            timeout=aiohttp.ClientTimeout(total=timeout)) as session:
                        async with session.get(url,
                                               params=params,
                                               headers=headers,
                                               proxy=new_proxy) as response:
                            
                            record_proxy_usage(new_proxy, weight=weight, error=False)
                            
                            return {
                                'status': response.status,
                                'data': await response.json() if response.status == 200 else None
                            }
                except Exception as e2:
                    record_proxy_usage(new_proxy, weight=weight, error=True)
                    logger.error(f"‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç–æ–∂–µ –Ω–µ—É–¥–∞—á–µ–Ω: {e2}")
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏
        logger.warning("‚ö†Ô∏è –í—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        try:
            async with aiohttp.ClientSession(
                    timeout=aiohttp.ClientTimeout(total=timeout)) as session:
                async with session.get(url, params=params, headers=headers) as response:
                    logger.info("‚úÖ Fallback: —É—Å–ø–µ—à–Ω—ã–π –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å")
                    return {
                        'status': response.status,
                        'data': await response.json() if response.status == 200 else None
                    }
        except Exception as e3:
            logger.error(f"‚ùå Fallback —Ç–æ–∂–µ –Ω–µ—É–¥–∞—á–µ–Ω: {e3}")
            raise e


async def validate_ticker_on_binance(ticker):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–∞ Binance —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π –ø—Ä–æ–∫—Å–∏"""
    try:
        url = f"{BINANCE_API_URL}/api/v3/ticker/24hr"
        params = {'symbol': f"{ticker}USDT"}

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –≤–µ—Å–æ–º 1
        try:
            result = await make_request_with_proxy(url, params, timeout=10, weight=1)

            if result['status'] == 451:
                logger.warning(
                    f"Binance API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (451) –¥–ª—è {ticker}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"
                )
                return ticker.upper() in [
                    'BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'XRP', 'DOGE', 'AVAX',
                    'DOT', 'MATIC', 'SHIB', 'LTC', 'ATOM', 'UNI', 'LINK', 'NEAR'
                ]

            if result['status'] == 200 and result['data']:
                logger.info(f"‚úÖ –¢–∏–∫–µ—Ä {ticker} –≤–∞–ª–∏–¥–µ–Ω –Ω–∞ Binance")
                return 'symbol' in result['data']
            else:
                logger.warning(f"‚ö†Ô∏è –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ {result['status']} –¥–ª—è {ticker}")
                return ticker.upper() in [
                    'BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'XRP', 'DOGE', 'AVAX',
                    'DOT', 'MATIC', 'SHIB', 'LTC', 'NEAR'
                ]

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {ticker}: {e}")
            
            # Fallback –±–µ–∑ –ø—Ä–æ–∫—Å–∏ —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞—è—Ö
            try:
                headers = {'User-Agent': 'Mozilla/5.0 (compatible; CryptoBot/1.0)'}
                async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=8)) as session:
                    async with session.get(url, params=params, headers=headers) as response:
                        if response.status == 200:
                            data = await response.json()
                            logger.info(f"‚úÖ Fallback –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è {ticker}")
                            return 'symbol' in data
            except Exception as fallback_error:
                logger.warning(f"‚ö†Ô∏è Fallback —Ç–æ–∂–µ –Ω–µ—É–¥–∞—á–µ–Ω –¥–ª—è {ticker}: {fallback_error}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
            return ticker.upper() in [
                'BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'XRP', 'DOGE', 'AVAX',
                'DOT', 'MATIC', 'SHIB', 'LTC', 'ATOM', 'UNI', 'LINK', 'NEAR'
            ]

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {ticker}: {e}")
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π fallback —Å–ø–∏—Å–æ–∫
        return ticker.upper() in [
            'BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'XRP', 'DOGE', 'AVAX', 'DOT',
            'MATIC', 'SHIB', 'LTC', 'ATOM', 'UNI', 'LINK', 'NEAR'
        ]


async def fetch_top_coins_from_api():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-50 –º–æ–Ω–µ—Ç –∏–∑ CoinGecko API"""
    try:
        url = f"{COINGECKO_API_URL}/coins/markets"
        params = {
            'vs_currency': 'usd',
            'order': 'market_cap_desc',
            'per_page': '50',
            'page': '1',
            'sparkline': 'false'
        }

        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ CoinGecko: {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(
                total=15)) as session:
            async with session.get(url, params=params) as response:
                logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç CoinGecko: HTTP {response.status}")
                if response.status == 200:
                    coins = await response.json()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(coins)} –º–æ–Ω–µ—Ç –æ—Ç CoinGecko")
                    return coins
                else:
                    response_text = await response.text()
                    logger.error(
                        f"–û—à–∏–±–∫–∞ CoinGecko API: HTTP {response.status}, —Ç–µ–∫—Å—Ç: {response_text}"
                    )
                    raise aiohttp.ClientError(f"HTTP {response.status}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ CoinGecko: {e}")
        return None


async def filter_and_validate_coins(coins):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –º–æ–Ω–µ—Ç—ã"""
    valid_coins = []

    for coin in coins:
        symbol = coin['symbol'].upper()
        name = coin.get('name', '').upper()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª—É (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        if symbol in EXCLUDED_COINS:
            logger.info(f"–ò—Å–∫–ª—é—á–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞: {symbol} (–≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π)")
            continue

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        coin_name = coin.get('name', '').lower()
        if any(stable in coin_name for stable in ['usd coin', 'tether', 'dai', 'true usd', 'binance usd']):
            logger.info(f"–ò—Å–∫–ª—é—á–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞: {symbol} (—Å—Ç–µ–π–±–ª–∫–æ–∏–Ω –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {coin_name})")
            continue

        # –ò—Å–∫–ª—é—á–∞–µ–º wrapped —Ç–æ–∫–µ–Ω—ã
        if symbol.startswith('W') and len(symbol) <= 5:
            logger.info(f"–ò—Å–∫–ª—é—á–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞ {symbol} - wrapped —Ç–æ–∫–µ–Ω")
            continue

        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
        if symbol.endswith(('USD', 'USDT', 'USDC')):
            logger.info(f"–ò—Å–∫–ª—é—á–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞ {symbol} - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å")
            continue

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞ Binance
        if await validate_ticker_on_binance(symbol):
            valid_coins.append(symbol)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è –º–æ–Ω–µ—Ç–∞: {symbol}")

            if len(valid_coins) >= 12:
                break

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await asyncio.sleep(0.1)

    return valid_coins


async def save_cache(coins):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –º–æ–Ω–µ—Ç –≤ —Ñ–∞–π–ª –ò –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    cache_data = {'coins': coins, 'timestamp': datetime.now().isoformat()}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    try:
        with open(CACHE_FILE, 'w') as f:
            json.dump(cache_data, f)
        logger.info(f"–ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {len(coins)} –º–æ–Ω–µ—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Autoscale)
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
        coins_str = ','.join(coins)
        os.environ['CACHED_COINS'] = coins_str

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º timestamp
        os.environ['CACHE_TIMESTAMP'] = cache_data['timestamp']

        logger.info(f"‚úÖ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {len(coins)} –º–æ–Ω–µ—Ç")
        logger.info(f"–ú–æ–Ω–µ—Ç—ã: {coins_str}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")


async def load_cache():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –º–æ–Ω–µ—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    cached_coins_env = os.environ.get('CACHED_COINS')
    cache_timestamp_env = os.environ.get('CACHE_TIMESTAMP')

    if cached_coins_env and cache_timestamp_env:
        try:
            coins = cached_coins_env.split(',')
            cache_time = datetime.fromisoformat(cache_timestamp_env)
            if datetime.now() - cache_time < timedelta(hours=CACHE_HOURS):
                logger.info(
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—ç—à –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {len(coins)} –º–æ–Ω–µ—Ç"
                )
                return coins
            else:
                logger.info("–ö—ç—à –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–ª")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")

    # –ï—Å–ª–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
    try:
        with open(CACHE_FILE, 'r') as f:
            cache_data = json.load(f)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞
        cache_time = datetime.fromisoformat(cache_data['timestamp'])
        if datetime.now() - cache_time < timedelta(hours=CACHE_HOURS):
            logger.info(
                f"–ó–∞–≥—Ä—É–∂–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞: {len(cache_data['coins'])} –º–æ–Ω–µ—Ç")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await save_cache(cache_data['coins'])
            return cache_data['coins']
        else:
            logger.info("–ö—ç—à-—Ñ–∞–π–ª —É—Å—Ç–∞—Ä–µ–ª")
            return None
    except FileNotFoundError:
        logger.info("–ö—ç—à-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
        return None


async def get_top_coins():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-12 –º–æ–Ω–µ—Ç (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ API)"""
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞ (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª)
    cached_coins = await load_cache()
    if cached_coins:
        return cached_coins

    # –ï—Å–ª–∏ –∫—ç—à –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º
    return await update_coins_cache()


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
_last_update_time = None
_update_cooldown_minutes = 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏


async def update_coins_cache():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –º–æ–Ω–µ—Ç —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    global _last_update_time

    now = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if _last_update_time and (now - _last_update_time).total_seconds() < _update_cooldown_minutes * 60:
        logger.info(f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ: {_last_update_time}")
        # –ï—Å–ª–∏ –±—ã–ª–æ –Ω–µ–¥–∞–≤–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return await load_cache()


    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –º–æ–Ω–µ—Ç...")
    _last_update_time = now

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
    coins_data = await fetch_top_coins_from_api()
    if not coins_data:
        # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫—ç—à
        old_cache = await load_cache()
        if old_cache:
            logger.warning(
                "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API")
            return old_cache
        else:
            logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
            return [
                'BTC', 'ETH', 'ADA', 'SOL', 'XRP', 'DOGE', 'AVAX', 'DOT',
                'MATIC', 'SHIB', 'LTC', 'ATOM'
            ]

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
    valid_coins = await filter_and_validate_coins(coins_data)

    if len(valid_coins) < 12:
        logger.warning(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(valid_coins)} –≤–∞–ª–∏–¥–Ω—ã—Ö –º–æ–Ω–µ—Ç")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à
    await save_cache(valid_coins)

    return valid_coins