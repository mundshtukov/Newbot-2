import os
import asyncio
import logging
import threading
import signal
import sys
from contextlib import asynccontextmanager
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from fastapi import FastAPI, Request
import uvicorn
import json
from datetime import datetime, timedelta

from coingecko import get_top_coins, update_coins_cache
from analysis import analyze_ticker
from config import TELEGRAM_BOT_TOKEN, ENVIRONMENT, WEBHOOK_URL, PORT, HOST, BOT_DISABLED
from admin_users import is_admin_user, is_super_admin, get_access_denied_message, is_chat_member, can_view_proxy_stats, get_chat_access_denied_message, has_basic_access

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)
logger = logging.getLogger(__name__)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(lifespan=lifespan)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
cached_coins = []
telegram_app = None
shutdown_event = asyncio.Event()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ù–∞—á–∏–Ω–∞—é graceful shutdown...")
    shutdown_event.set()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

# –ö–æ–Ω—Ç–µ–∫—Å—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    global telegram_app, cached_coins
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç
    if BOT_DISABLED:
        logger.info("üö´ –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω (BOT_DISABLED=true)")
        yield
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    import psutil
    current_pid = os.getpid()
    python_processes = []

    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.info['name'] and 'python' in proc.info['name'].lower():
                cmdline = proc.info['cmdline']
                if cmdline and 'main.py' in ' '.join(cmdline):
                    if proc.info['pid'] != current_pid:
                        python_processes.append(proc.info['pid'])
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue

    if python_processes:
        logger.warning(
            f"üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã main.py: {python_processes}")
        logger.warning("–ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")
        yield
        return

    # –°–æ–∑–¥–∞–µ–º Telegram Application
    telegram_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CallbackQueryHandler(button_callback))
    telegram_app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–æ–Ω–µ—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
    cached_coins = [
        'BTC', 'ETH', 'ADA', 'SOL', 'XRP', 'DOGE', 'AVAX', 'DOT', 'MATIC',
        'SHIB', 'LTC', 'ATOM'
    ]
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cached_coins)} –º–æ–Ω–µ—Ç (fallback)")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –≤ —Ñ–æ–Ω–µ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
    async def load_coins_after_startup():
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
            global cached_coins
            logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...")
            fresh_coins = await update_coins_cache()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º update_coins_cache –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if fresh_coins and len(fresh_coins) >= 10:
                cached_coins = fresh_coins
                logger.info(f"‚úÖ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: {len(fresh_coins)}")
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: {', '.join(fresh_coins)}")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞ –∫–∞–∫ fallback
                cached_coins = await get_top_coins()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
            try:
                cached_coins = await get_top_coins()
            except:
                pass

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    async def auto_update_coins():
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤"""
        while not shutdown_event.is_set():
            try:
                await asyncio.sleep(6 * 60 * 60)  # 6 —á–∞—Å–æ–≤ = 21600 —Å–µ–∫—É–Ω–¥
                if shutdown_event.is_set():
                    break
                logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç...")
                new_coins = await update_coins_cache()
                if new_coins and len(new_coins) >= 10:
                    global cached_coins
                    cached_coins = new_coins
                    logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {len(new_coins)} –º–æ–Ω–µ—Ç")
                else:
                    logger.warning("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    # Keep-alive –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    async def keep_alive():
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π keep-alive –º–µ—Ö–∞–Ω–∏–∑–º"""
        while not shutdown_event.is_set():
            try:
                await asyncio.sleep(180)  # –ö–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
                if not shutdown_event.is_set():
                    logger.info("ü´Ä Keep-alive ping - –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
                    if telegram_app and telegram_app.running:
                        logger.info("üì± Telegram –±–æ—Ç –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ keep-alive: {e}")

    # –í–Ω–µ—à–Ω–∏–π keep-alive –ø–∏–Ω–≥ (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
    async def external_keepalive():
        """–í–Ω–µ—à–Ω–∏–π keep-alive –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        await asyncio.sleep(60)  # –ù–∞—á–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        while not shutdown_event.is_set():
            try:
                if WEBHOOK_URL:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤–Ω–µ—à–Ω–∏–π URL
                    import aiohttp
                    async with aiohttp.ClientSession() as session:
                        url = f"{WEBHOOK_URL}/keepalive"
                        await session.get(url, timeout=10)
                        logger.info("üåê –í–Ω–µ—à–Ω–∏–π keep-alive –ø–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                await asyncio.sleep(600)  # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ keep-alive: {e}")
                await asyncio.sleep(600)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(load_coins_after_startup())
    asyncio.create_task(auto_update_coins())
    asyncio.create_task(keep_alive())
    asyncio.create_task(external_keepalive())

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    await telegram_app.initialize()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —á–µ—Ç–∫–æ –∏ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ
    from config import IS_RENDER_DEPLOYMENT
    use_webhook = bool(WEBHOOK_URL and (ENVIRONMENT == 'production' or IS_RENDER_DEPLOYMENT))

    if use_webhook:
        logger.info("üöÄ –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º (webhook)")
    else:
        logger.info("üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (polling)")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–µ–∂–∏–º–µ
    await telegram_app.start()

    if use_webhook:
        # –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º - –¢–û–õ–¨–ö–û webhook
        try:
            logger.info("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook —Ä–µ–∂–∏–º–∞...")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º webhook –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await telegram_app.bot.delete_webhook(drop_pending_updates=True)
            await asyncio.sleep(3)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
            webhook_url = f"{WEBHOOK_URL}/webhook"
            result = await telegram_app.bot.set_webhook(
                webhook_url, drop_pending_updates=True, max_connections=40)

            if result:
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
    else:
        # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –¢–û–õ–¨–ö–û polling
        try:
            logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ polling —Ä–µ–∂–∏–º–∞...")

            # –£–¥–∞–ª—è–µ–º webhook –ø–æ–ª–Ω–æ—Å—Ç—å—é
            await telegram_app.bot.delete_webhook(drop_pending_updates=True)
            await asyncio.sleep(2)

            logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω, –≥–æ—Ç–æ–≤ –∫ polling")

            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
            async def run_polling():
                try:
                    await telegram_app.run_polling(drop_pending_updates=True)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")

            asyncio.create_task(run_polling())

    try:
        yield
    finally:
        # Shutdown
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        shutdown_event.set()
        if telegram_app:
            await telegram_app.stop()
            await telegram_app.shutdown()
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not await has_basic_access(context.bot, update.effective_user.id):
        await update.message.reply_text(get_chat_access_denied_message())
        return

    keyboard = [
        [KeyboardButton("üí∞ –ö —Å–ø–∏—Å–∫—É –º–æ–Ω–µ—Ç"), KeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
    ]

    if is_super_admin(update.effective_user.id):
        keyboard.append([KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏")])
    elif is_admin_user(update.effective_user.id):
        keyboard.append([KeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–∫–µ—Ä—É")])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    welcome_message = """
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Signals Bot!

üìä –ü–æ–ª—É—á–∞–π—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:
"""
    await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='Markdown')

async def show_coins_list(update, context, edit_message=True):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ø-–º–æ–Ω–µ—Ç"""
    global cached_coins
    user_id = update.effective_user.id

    if not await has_basic_access(context.bot, user_id):
        await update.message.reply_text(get_chat_access_denied_message())
        return

    if not cached_coins:
        cached_coins = await get_top_coins()

    keyboard = []
    row = []
    for i, coin in enumerate(cached_coins):
        row.append(InlineKeyboardButton(coin, callback_data=f"coin_{coin}"))
        if (i + 1) % 3 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    additional_buttons = []
    if is_super_admin(user_id) or is_admin_user(user_id):
        additional_buttons.append([InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–∫–µ—Ä—É", callback_data="analyze_ticker")])
    if is_super_admin(user_id):
        additional_buttons.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="update_list")])
        additional_buttons.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏", callback_data="proxy_stats")])
    
    keyboard.extend(additional_buttons)
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"
    
    try:
        if edit_message and hasattr(update, 'callback_query'):
            await update.callback_query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def delete_signal_message(context):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏–≥–Ω–∞–ª–æ–º"""
    if 'signal_message_id' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=context.user_data['chat_id'],
                message_id=context.user_data['signal_message_id']
            )
        except Exception:
            pass
        finally:
            del context.user_data['signal_message_id']

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    if not await has_basic_access(context.bot, user_id):
        await query.message.reply_text(get_chat_access_denied_message())
        return

    if data == "update_list":
        if not is_super_admin(user_id):
            await query.message.reply_text(get_access_denied_message())
            return

        await query.message.edit_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç...")
        try:
            new_cached_coins = await update_coins_cache()
            if new_cached_coins:
                global cached_coins
                cached_coins = new_cached_coins
                await query.message.edit_text("‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                await show_coins_list(update, context, edit_message=False)
            else:
                await query.message.edit_text("‚ö†Ô∏è API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                await show_coins_list(update, context, edit_message=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
            await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await show_coins_list(update, context, edit_message=False)

    elif data == "proxy_stats":
        if not can_view_proxy_stats(user_id):
            await query.message.reply_text(get_access_denied_message())
            return

        from config import get_proxy_stats
        from admin_users import format_proxy_stats_message
        
        stats = get_proxy_stats()
        message = format_proxy_stats_message(stats)
        
        await query.message.edit_text(message, parse_mode='Markdown')

    elif data == "analyze_ticker":
        if not is_super_admin(user_id) and not is_admin_user(user_id):
            await query.message.reply_text(get_access_denied_message())
            return

        await query.message.edit_text("üîç –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, ADA):")
        context.user_data['waiting_for_ticker'] = True
        context.user_data['chat_id'] = query.message.chat_id

    elif data.startswith("coin_"):
        ticker = data.replace("coin_", "")
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–∏–≥–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        await delete_signal_message(context)
        
        context.user_data['chat_id'] = query.message.chat_id
        progress_msg = await query.message.edit_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")

        try:
            signal = await analyze_ticker(ticker, update, progress_msg.message_id, context.bot)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=progress_msg.message_id
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            signal_msg = await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=signal,
                parse_mode='Markdown'
            )
            
            context.user_data['signal_message_id'] = signal_msg.message_id

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {ticker}: {e}")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=progress_msg.message_id
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_msg = await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {ticker.upper()}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='Markdown'
            )
            context.user_data['signal_message_id'] = error_msg.message_id

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global cached_coins

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not update.message:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª
    if update.message.chat.type != 'private':
        # –í –≥—Ä—É–ø–ø–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
        return

    text = update.message.text
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø: –ª–∏–±–æ –∞–¥–º–∏–Ω, –ª–∏–±–æ —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞
    if not is_admin_user(user_id) and not await is_chat_member(context.bot, user_id):
        await update.message.reply_text(get_chat_access_denied_message())
        return

    if text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫":
        if not is_super_admin(user_id):
            await update.message.reply_text(get_access_denied_message())
            return

        status_msg = await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç...")

        try:
            new_cached_coins = await update_coins_cache()
            if new_cached_coins:
                cached_coins = new_cached_coins
                await status_msg.edit_text("‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                await show_coins_list(update, context, edit_message=False)
            else:
                await status_msg.edit_text("‚ö†Ô∏è API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
                await show_coins_list(update, context, edit_message=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
            await status_msg.edit_text("‚ùå –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ (–º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç).")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await show_coins_list(update, context, edit_message=False)

    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏":
        if not can_view_proxy_stats(user_id):
            await update.message.reply_text(get_access_denied_message())
            return

        from config import get_proxy_stats
        from admin_users import format_proxy_stats_message
        
        stats = get_proxy_stats()
        message = format_proxy_stats_message(stats)
        
        await update.message.reply_text(message, parse_mode='Markdown')

    elif text == "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        help_text = f"""
üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**

üéØ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é –º–æ–Ω–µ—Ç—É –∏–∑ —Ç–æ–ø-12 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
‚Ä¢ "üí∞ –ö —Å–ø–∏—Å–∫—É –º–æ–Ω–µ—Ç" - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∞–∫—Ç–∏–≤–æ–≤
{"‚Ä¢ üîç –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–∫–µ—Ä—É - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞" if is_super_admin(user_id) or is_admin_user(user_id) else ""}

ü§ñ **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è:**
‚Ä¢ –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏–∑ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö

üìä **–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:**
‚Ä¢ –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —É—Å–ø–µ—Ö–∞
‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å –Ω–µ –º–µ–Ω–µ–µ 1:2
‚Ä¢ Long/Short —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –ª—é–±–æ–≥–æ —Ä—ã–Ω–∫–∞

‚ö° **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∑–∞ —Å–µ–∫—É–Ω–¥—ã –≤–º–µ—Å—Ç–æ —á–∞—Å–æ–≤
‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö —ç–º–æ—Ü–∏–π
‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ä—ã–Ω–∫–∞

‚ö†Ô∏è **–î–∏—Å–∫–ª–µ–π–º–µ—Ä:**
–°–∏–≥–Ω–∞–ª—ã –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–∏—Å–∫–∞–º–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    elif text == "üîç –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–∫–µ—Ä—É":
        if not is_super_admin(user_id) and not is_admin_user(user_id):
            await update.message.reply_text(get_access_denied_message())
            return

        await update.message.reply_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, ADA):")
        context.user_data['waiting_for_ticker'] = True
        context.user_data['chat_id'] = update.message.chat_id

    elif context.user_data.get('waiting_for_ticker'):
        if not is_super_admin(user_id) and not is_admin_user(user_id) and not await is_chat_member(context.bot, user_id):
            await update.message.reply_text(get_access_denied_message())
            context.user_data['waiting_for_ticker'] = False
            return

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–∏–≥–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        await delete_signal_message(context)

        ticker = update.message.text.upper().strip()
        context.user_data['waiting_for_ticker'] = False

        progress_msg = await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è analyze_ticker
        class TempUpdate:
            def __init__(self, message):
                self.message = message

        temp_update = TempUpdate(update.message)

        try:
            signal = await analyze_ticker(ticker, temp_update, progress_msg.message_id, context.bot)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            await context.bot.delete_message(
                chat_id=update.message.chat_id,
                message_id=progress_msg.message_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            signal_msg = await update.message.reply_text(signal, parse_mode='Markdown')
            context.user_data['signal_message_id'] = signal_msg.message_id

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {ticker}: {e}")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            await context.bot.delete_message(
                chat_id=update.message.chat_id,
                message_id=progress_msg.message_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_msg = await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {ticker}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–∏–∫–µ—Ä–∞.",
                parse_mode='Markdown')
            context.user_data['signal_message_id'] = error_msg.message_id

@app.post("/webhook")
async def webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è Telegram"""
    global telegram_app
    if telegram_app:
        update = Update.de_json(await request.json(), telegram_app.bot)
        await telegram_app.process_update(update)
    return {"status": "ok"}

@app.get("/keepalive")
async def keepalive():
    """Keep-alive endpoint"""
    return {"status": "alive"}

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    max_restarts = 3
    restart_count = 0
    
    while restart_count < max_restarts:
        try:
            from config import IS_RENDER_DEPLOYMENT

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
            webhook_configured = bool(WEBHOOK_URL)
            is_production = ENVIRONMENT == 'production' or IS_RENDER_DEPLOYMENT

            if is_production and webhook_configured:
                logger.info("üöÄ –†–µ–∂–∏–º: Production (Webhook)")
            elif is_production:
                logger.info("üöÄ –†–µ–∂–∏–º: Production (–±–µ–∑ webhook - polling)")
            elif webhook_configured:
                logger.info("üîß –†–µ–∂–∏–º: Development (—Å webhook)")
            else:
                logger.info("üîß –†–µ–∂–∏–º: Development (polling)")

            logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {HOST}:{PORT} (–ø–æ–ø—ã—Ç–∫–∞ {restart_count + 1})")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º uvicorn
            config = uvicorn.Config(
                app,
                host=HOST,
                port=PORT,
                log_level="info",
                access_log=True,
                server_header=False,
                date_header=False
            )
            server = uvicorn.Server(config)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            await server.serve()
            
            # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            break
            
        except KeyboardInterrupt:
            logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            restart_count += 1
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–ø–æ–ø—ã—Ç–∫–∞ {restart_count}): {e}")
            
            if restart_count < max_restarts:
                logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥... ({restart_count}/{max_restarts})")
                await asyncio.sleep(5)
                shutdown_event.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            else:
                logger.error("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤")
                sys.exit(1)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)