import aiohttp
import asyncio
import random
import logging
import requests
from config import BINANCE_API_URL, get_current_proxy, rotate_proxy, record_proxy_usage
from datetime import datetime

logger = logging.getLogger(__name__)


async def sleep_random():
    """–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 0.7 –¥–æ 0.9 —Å–µ–∫—É–Ω–¥—ã"""
    await asyncio.sleep(random.uniform(0.7, 0.9))


async def update_progress_with_bot(bot, update, current_step, steps,
                                   progress_message_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
    total_steps = len(steps)
    percentage = int((current_step / total_steps) * 100)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    filled_squares = "üü¶" * current_step
    empty_squares = "‚¨ú" * (total_steps - current_step)
    progress_bar = f"{filled_squares}{empty_squares} {percentage}%"

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤
    steps_list = []
    for i, step in enumerate(steps):
        if i < current_step:
            steps_list.append(f"‚úÖ {step}")
        elif i == current_step:
            steps_list.append(f"üîÑ {step}")
        else:
            steps_list.append(f"‚è≥ {step}")

    message_text = f"{progress_bar}\n" + "\n".join(steps_list)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id
    if hasattr(update, 'callback_query') and update.callback_query:
        chat_id = update.callback_query.message.chat_id
    else:
        chat_id = update.message.chat_id

    try:
        await bot.edit_message_text(chat_id=chat_id,
                                    message_id=progress_message_id,
                                    text=message_text)
        await sleep_random()  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")


async def make_request_with_retry(url, params, timeout=10, weight=1):
    """
    –î–µ–ª–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP GET –∑–∞–ø—Ä–æ—Å —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.
    """
    from config import get_current_proxy, record_proxy_usage, rotate_proxy

    attempts = 2  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–æ—Ç–∞—Ü–∏–∏

    for attempt in range(attempts):
        proxy = get_current_proxy()

        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                'Accept': 'application/json',
                'Accept-Language': 'en-US,en;q=0.9'
            }

            connector = aiohttp.TCPConnector() if proxy else None

            if proxy:
                logger.info(f"üåê –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏")

            async with aiohttp.ClientSession(
                    connector=connector,
                    timeout=aiohttp.ClientTimeout(total=timeout)) as session:
                async with session.get(
                        url,
                        params=params,
                        headers=headers,
                        proxy=proxy if proxy else None) as response:

                    if response.status == 200:
                        data = await response.json()

                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                        if proxy:
                            record_proxy_usage(proxy, weight=weight, error=False)

                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ {url} (weight: {weight})")
                        return {
                            "status_code": response.status,
                            "json": lambda: data
                        }
                    else:
                        logger.warning(f"‚ö†Ô∏è HTTP {response.status} –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")

                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
                        if proxy and response.status >= 400:
                            record_proxy_usage(proxy, weight=weight, error=True)

                        return {"status_code": response.status, "json": lambda: None}
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
            if proxy and attempt < attempts - 1:
                logger.info("üîÑ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏...")
                rotate_proxy()
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
    return None


async def validate_ticker(ticker):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–∞ Binance"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ ticker/24hr —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
        url = f"{BINANCE_API_URL}/api/v3/ticker/24hr"
        params = {'symbol': f"{ticker}USDT"}
        response = await make_request_with_retry(url, params, timeout=10)

        if response is None:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–∫–µ—Ä–∞ {ticker} –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫."
            )
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            return "CONNECTION_ERROR"

        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 451 –∏–ª–∏ –¥—Ä—É–≥–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å—á–∏—Ç–∞–µ–º —Ç–∏–∫–µ—Ä –≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç
        if response["status_code"] == 451:
            logger.warning(
                f"Binance API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (451), –ø—Ä–∏–Ω–∏–º–∞–µ–º {ticker} –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–π"
            )
            return ticker.upper() in [
                'BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'XRP', 'DOGE', 'AVAX',
                'DOT', 'MATIC', 'SHIB', 'LTC', 'ATOM', 'UNI', 'LINK'
            ]

        if response["status_code"] == 200:
            data = response["json"]()
            return 'symbol' in data
        elif response["status_code"] == 400:
            # 400 –æ–±—ã—á–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Å–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            return False
        else:
            logger.warning(
                f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ {response['status_code']} –¥–ª—è {ticker}, –≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            )
            # –ü—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            return "CONNECTION_ERROR"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {ticker}: {e}")
        # –ü—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        return "CONNECTION_ERROR"


async def get_klines(symbol, interval, limit=100):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å Binance"""
    try:
        url = f"{BINANCE_API_URL}/api/v3/klines"
        params = {'symbol': symbol, 'interval': interval, 'limit': limit}
        response = await make_request_with_retry(url, params, timeout=15)

        if response is None:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö klines –¥–ª—è {symbol} –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫."
            )
            return None

        if response["status_code"] == 451:
            logger.error(f"API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è {symbol} (451)")
            return None

        if response["status_code"] == 200:
            return response["json"]()
        else:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: HTTP {response['status_code']}"
            )
            return None
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
        return None


def calculate_sma(data, period):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Å–∫–æ–ª—å–∑—è—â—É—é —Å—Ä–µ–¥–Ω—é—é"""
    if not data or len(data) < period:
        return None
    closes = [float(candle[4]) for candle in data]
    return sum(closes[-period:]) / period


def calculate_rsi(data, period=14):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã"""
    if not data or len(data) < period:
        return None
    closes = [float(candle[4]) for candle in data]
    gains = losses = 0
    for i in range(1, period):
        diff = closes[i] - closes[i - 1]
        if diff > 0:
            gains += diff
        else:
            losses -= diff
    avg_gain = gains / period
    avg_loss = losses / period
    rs = avg_gain / avg_loss if avg_loss != 0 else 0
    return 100 - (100 / (1 + rs))


def get_support_resistance_levels(data_4h, data_1h):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
    if not data_4h or not data_1h:
        return None, None

    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
    recent_4h = data_4h[-30:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–≤–µ—á–µ–π 4h
    recent_1h = data_1h[-50:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π 1h

    # –£—Ä–æ–≤–Ω–∏ —Å —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    lows_4h = [float(candle[3]) for candle in recent_4h]
    highs_4h = [float(candle[2]) for candle in recent_4h]
    lows_1h = [float(candle[3]) for candle in recent_1h]
    highs_1h = [float(candle[2]) for candle in recent_1h]

    # –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
    support = min(min(lows_4h), min(lows_1h[-20:]))
    resistance = max(max(highs_4h), max(highs_1h[-20:]))

    return support, resistance


def calculate_risk_reward(entry, stop_loss, take_profit):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å"""
    risk = abs(entry - stop_loss)
    reward = abs(take_profit - entry)
    return reward / risk if risk > 0 else 0


def format_price(price):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ—ë –≤–µ–ª–∏—á–∏–Ω—ã"""
    if price < 1:
        return f"${price:.6f}"
    elif price < 10:
        return f"${price:.4f}"
    elif price < 100:
        return f"${price:.3f}"
    elif price < 1000:
        return f"${price:.2f}"
    else:
        return f"${price:,.0f}"


def format_signal(symbol, current_price, direction, entry_price, stop_loss,
                  take_profit, stop_loss_pct, take_profit_pct, risk_reward,
                  cancel_price, warning, sma_50, sma_200, support, resistance):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""

    direction_emoji = "üìà" if direction == "Long" else "üìâ"
    level_price = support if direction == "Long" else resistance
    level_name = "–ø–æ–¥–¥–µ—Ä–∂–∫–∏" if direction == "Long" else "—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"
    trend_name = "–≤–æ—Å—Ö–æ–¥—è—â–∏–π" if direction == "Long" else "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π"
    explanation = f"{trend_name} —Ç—Ä–µ–Ω–¥, –≤—Ö–æ–¥ –æ—Ç {level_name} {format_price(level_price)}"

    signal = f"""{direction_emoji} *{symbol}*
üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {format_price(current_price)}
üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: *{direction}*
üéØ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: {format_price(entry_price)} (–ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä)
üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {format_price(stop_loss)} ({stop_loss_pct:+.2f}%)
üíé –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {format_price(take_profit)} ({take_profit_pct:+.2f}%)
‚öñÔ∏è –†–∏—Å–∫/–ü—Ä–∏–±—ã–ª—å: 1:{risk_reward:.1f}
üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {explanation}
‚ùå –£—Å–ª–æ–≤–∏—è –æ—Ç–º–µ–Ω—ã: –ü—Ä–æ–±–æ–π {format_price(cancel_price)}"""

    if warning:
        signal += f"\n\n{warning}"

    return signal


def format_progress_bars(current_step, total_steps, square_type="üü¶"):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã"""
    filled = square_type * current_step
    empty = "‚è≥" * (total_steps - current_step)
    percentage = int((current_step / total_steps) * 100)
    return f"{filled}{empty} {percentage}%"


def format_steps_list(steps, current_step):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤"""
    result = []
    for i, step_text in enumerate(steps):
        if i < current_step - 1:
            result.append(f"‚úÖ {step_text}")
        elif i == current_step - 1:
            result.append(f"üîÑ {step_text}")
    return result


async def update_progress_message(update, current_step, steps,
                                  progress_message_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    total_steps = len(steps)
    percentage = int((current_step / total_steps) * 100)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    filled_squares = "üü¶" * current_step
    empty_squares = "‚¨ú" * (total_steps - current_step)
    progress_bar = f"{filled_squares}{empty_squares} {percentage}%"

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤
    steps_list = []
    for i, step in enumerate(steps):
        if i < current_step:
            steps_list.append(f"‚úÖ {step}")
        elif i == current_step:
            steps_list.append(f"üîÑ {step}")
        else:
            steps_list.append(f"‚è≥ {step}")

    message_text = f"{progress_bar}\n" + "\n".join(steps_list)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–¥–µ –≤–∑—è—Ç—å chat_id –∏ bot
    if hasattr(update, 'callback_query') and update.callback_query:
        chat_id = update.callback_query.message.chat_id
        bot = update.callback_query.bot if hasattr(update.callback_query,
                                                   'bot') else None
    else:
        chat_id = update.message.chat_id
        bot = update.message.bot if hasattr(update.message, 'bot') else None

    try:
        if bot:
            await bot.edit_message_text(chat_id=chat_id,
                                        message_id=progress_message_id,
                                        text=message_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")


async def analyze_ticker(ticker, update, progress_message_id=None, bot=None):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–∫–µ—Ä–∞"""
    symbol = f"{ticker}USDT"

    steps = [
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance API...", "–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...",
        "–ú—É–ª—å—Ç–∏—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑...", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –≤—Ö–æ–¥–∞...",
        "–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å...", "‚úÖ –°–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤!"
    ]

    current_step = 1
    if progress_message_id and bot:
        await update_progress_with_bot(bot, update, current_step, steps,
                                       progress_message_id)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–∫–µ—Ä–∞
    validation_result = await validate_ticker(ticker)
    if validation_result == "CONNECTION_ERROR":
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    elif not validation_result:
        return f"‚ùå –û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ä {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Binance. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, BTC –∏–ª–∏ ETH."

    # –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    current_step = 2
    if progress_message_id and bot:
        await update_progress_with_bot(bot, update, current_step, steps,
                                       progress_message_id)

    data_1d = await get_klines(symbol, '1d', 200)
    data_4h = await get_klines(symbol, '4h', 100)
    data_1h = await get_klines(symbol, '1h', 50)

    if not (data_1d and data_4h and data_1h):
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    # –≠—Ç–∞–ø 3: –†–∞—Å—á–µ—Ç—ã SMA
    current_step = 3
    if progress_message_id and bot:
        await update_progress_with_bot(bot, update, current_step, steps,
                                       progress_message_id)

    current_price = float(data_1h[-1][4])
    sma_50_1d = calculate_sma(data_1d, 50)
    sma_200_1d = calculate_sma(data_1d, 200)

    if sma_50_1d is None or sma_200_1d is None:
        return f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è {ticker}."

    # –≠—Ç–∞–ø 4: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
    current_step = 4
    if progress_message_id and bot:
        await update_progress_with_bot(bot, update, current_step, steps,
                                       progress_message_id)

    direction = 'Long' if sma_50_1d > sma_200_1d else 'Short'
    support, resistance = get_support_resistance_levels(data_4h, data_1h)

    if support is None or resistance is None:
        return f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–Ω–∏ –¥–ª—è {ticker}."

    # –≠—Ç–∞–ø 5: –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
    current_step = 5
    if progress_message_id and bot:
        await update_progress_with_bot(bot, update, current_step, steps,
                                       progress_message_id)

    entry_price = support * 1.005 if direction == 'Long' else resistance * 0.995
    stop_loss = support * 0.98 if direction == 'Long' else resistance * 1.02
    take_profit = resistance if direction == 'Long' else support
    risk_reward = calculate_risk_reward(entry_price, stop_loss, take_profit)

    # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ (—Å—Ç–æ–ø-–ª–æ—Å—Å –≤—Å–µ–≥–¥–∞ —É–±—ã—Ç–æ–∫, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–±—ã–ª—å)
    if direction == 'Long':
        stop_loss_pct = (
            (stop_loss - entry_price) / entry_price) * 100  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
        take_profit_pct = (
            (take_profit - entry_price) / entry_price) * 100  # –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
    else:  # Short
        stop_loss_pct = -((stop_loss - entry_price) /
                          entry_price) * 100  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π (—É–±—ã—Ç–æ–∫)
        take_profit_pct = -((take_profit - entry_price) /
                            entry_price) * 100  # –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π (–ø—Ä–∏–±—ã–ª—å)
    cancel_price = support * 0.99 if direction == 'Long' else resistance * 1.01

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
    warning = ""
    if risk_reward < 2:
        warning = f"‚ö†Ô∏è –î–ª—è {ticker} —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ ({risk_reward:.2f}). –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∏–≥–Ω–∞–ª."

    # –≠—Ç–∞–ø 6: –°–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤
    current_step = 6
    if progress_message_id and bot:
        await update_progress_with_bot(bot, update, current_step, steps,
                                       progress_message_id)
        await sleep_random(
        )  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

    return format_signal(symbol, current_price, direction, entry_price,
                         stop_loss, take_profit, stop_loss_pct,
                         take_profit_pct, risk_reward, cancel_price, warning,
                         sma_50_1d, sma_200_1d, support, resistance)