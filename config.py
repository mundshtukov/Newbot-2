import os
from dotenv import load_dotenv

load_dotenv()

# API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
COINGECKO_API_URL = "https://api.coingecko.com/api/v3"
BINANCE_API_URL = "https://api.binance.com"
BINANCE_API_FALLBACK = "https://api1.binance.com"  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–ø–ª–æ—è
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')  # development –∏–ª–∏ production
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')  # URL –¥–ª—è webhook –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
BOT_DISABLED = os.getenv('BOT_DISABLED', 'false').lower() == 'true'  # –ü–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
# –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ fallback
PORT = int(os.getenv('PORT', 10000))  # Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 10000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
HOST = '0.0.0.0'  # –•–æ—Å—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞

# –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫–æ–π –ø–æ—Ä—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
print(f"   –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç: {PORT}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Render deployment
IS_RENDER_DEPLOYMENT = os.getenv('RENDER') == 'true'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
print(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
print(f"   ENVIRONMENT: {ENVIRONMENT}")
print(f"   IS_RENDER_DEPLOYMENT: {IS_RENDER_DEPLOYMENT}")
print(f"   WEBHOOK_URL: {WEBHOOK_URL}")

# –ü—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
import time
import threading
from collections import defaultdict

_proxy_list = []
_proxy_stats = {}
_proxy_lock = threading.Lock()

# –õ–∏–º–∏—Ç—ã Binance API
BINANCE_WEIGHT_LIMIT = 1200  # –õ–∏–º–∏—Ç –≤–µ—Å–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
BINANCE_REQUEST_LIMIT = 10   # –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
SAFE_MARGIN = 0.8  # 80% –æ—Ç –ª–∏–º–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

class ProxyBalancer:
    def __init__(self):
        self.proxy_requests = defaultdict(list)  # {proxy_index: [timestamp, ...]}
        self.proxy_weights = defaultdict(list)   # {proxy_index: [(timestamp, weight), ...]}
        self.proxy_errors = defaultdict(int)     # {proxy_index: error_count}
        self.last_used = 0  # –î–ª—è round-robin
        
    def cleanup_old_records(self, proxy_index):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)"""
        current_time = time.time()
        
        # –û—á–∏—â–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 60 —Å–µ–∫—É–Ω–¥
        self.proxy_requests[proxy_index] = [
            ts for ts in self.proxy_requests[proxy_index]
            if current_time - ts < 60
        ]
        
        # –û—á–∏—â–∞–µ–º –≤–µ—Å–∞ —Å—Ç–∞—Ä—à–µ 60 —Å–µ–∫—É–Ω–¥
        self.proxy_weights[proxy_index] = [
            (ts, weight) for ts, weight in self.proxy_weights[proxy_index]
            if current_time - ts < 60
        ]
    
    def can_use_proxy(self, proxy_index):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤"""
        self.cleanup_old_records(proxy_index)
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
        recent_requests = [
            ts for ts in self.proxy_requests[proxy_index]
            if current_time - ts < 1
        ]
        if len(recent_requests) >= BINANCE_REQUEST_LIMIT * SAFE_MARGIN:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤–µ—Å–∞ –≤ –º–∏–Ω—É—Ç—É
        current_weight = sum(
            weight for ts, weight in self.proxy_weights[proxy_index]
            if current_time - ts < 60
        )
        if current_weight >= BINANCE_WEIGHT_LIMIT * SAFE_MARGIN:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        if self.proxy_errors[proxy_index] > 3:
            return False
            
        return True
    
    def get_best_proxy(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–∫—Å–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞–≥—Ä—É–∑–∫–∏"""
        if not _proxy_list:
            return None
            
        available_proxies = []
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
        for i in range(len(_proxy_list)):
            if self.can_use_proxy(i):
                # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏
                load_score = len(self.proxy_requests[i]) + len(self.proxy_weights[i])
                available_proxies.append((i, load_score))
        
        if not available_proxies:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            self.proxy_errors.clear()
            for i in range(len(_proxy_list)):
                if self.can_use_proxy(i):
                    available_proxies.append((i, 0))
        
        if not available_proxies:
            # Round-robin –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã
            self.last_used = (self.last_used + 1) % len(_proxy_list)
            return self.last_used
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Å–∏ —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
        available_proxies.sort(key=lambda x: x[1])
        return available_proxies[0][0]
    
    def record_request(self, proxy_index, weight=1):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
        current_time = time.time()
        self.proxy_requests[proxy_index].append(current_time)
        self.proxy_weights[proxy_index].append((current_time, weight))
    
    def record_error(self, proxy_index):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –ø—Ä–æ–∫—Å–∏"""
        self.proxy_errors[proxy_index] += 1
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–∫—Å–∏ #{proxy_index + 1}, –≤—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {self.proxy_errors[proxy_index]}")
    
    def reset_errors(self, proxy_index):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ–∫—Å–∏"""
        self.proxy_errors[proxy_index] = 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫
_proxy_balancer = ProxyBalancer()

def load_proxy_list():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏"""
    global _proxy_list, _proxy_stats, _proxy_balancer
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    old_proxy_list = _proxy_list.copy()
    
    _proxy_list = []
    _proxy_stats = {}
    
    for i in range(1, 11):  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 10 –ø—Ä–æ–∫—Å–∏
        proxy_key = f'proxy{i}'
        proxy_value = os.getenv(proxy_key)
        if proxy_value:
            parts = proxy_value.split(':')
            
            if len(parts) == 2:
                # –û–±—ã—á–Ω—ã–π –ø—Ä–æ–∫—Å–∏: IP:PORT
                ip, port = parts
                proxy_url = f"http://{ip}:{port}"
                _proxy_list.append(proxy_url)
                _proxy_stats[len(_proxy_list) - 1] = {
                    'url': proxy_url,
                    'requests': 0,
                    'errors': 0,
                    'last_used': None
                }
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–∫—Å–∏ {proxy_key}: {ip}:{port}")
                
            elif len(parts) == 4:
                # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –ø—Ä–æ–∫—Å–∏: IP:PORT:USERNAME:PASSWORD
                ip, port, username, password = parts
                proxy_url = f"http://{username}:{password}@{ip}:{port}"
                _proxy_list.append(proxy_url)
                _proxy_stats[len(_proxy_list) - 1] = {
                    'url': proxy_url,
                    'requests': 0,
                    'errors': 0,
                    'last_used': None
                }
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –ø—Ä–æ–∫—Å–∏ {proxy_key}: {username}:***@{ip}:{port}")
                
            else:
                print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏ {proxy_key}: {proxy_value}")
                print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: IP:PORT –∏–ª–∏ IP:PORT:USERNAME:PASSWORD")
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
    if old_proxy_list and old_proxy_list != _proxy_list:
        print(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–∫—Å–∏")
        print(f"   –ë—ã–ª–æ: {len(old_proxy_list)} –ø—Ä–æ–∫—Å–∏")
        print(f"   –°—Ç–∞–ª–æ: {len(_proxy_list)} –ø—Ä–æ–∫—Å–∏")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        _proxy_balancer = ProxyBalancer()
        print("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
    
    if _proxy_list:
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(_proxy_list)} –ø—Ä–æ–∫—Å–∏ —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏")
        print(f"üîí –õ–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {int(BINANCE_REQUEST_LIMIT * SAFE_MARGIN)} req/sec, {int(BINANCE_WEIGHT_LIMIT * SAFE_MARGIN)} weight/min")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ—Ç
        _proxy_balancer = ProxyBalancer()

def get_current_proxy():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ —Å —É—á–µ—Ç–æ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏"""
    with _proxy_lock:
        if not _proxy_list:
            load_proxy_list()
        
        if not _proxy_list:
            return None
        
        proxy_index = _proxy_balancer.get_best_proxy()
        if proxy_index is not None and proxy_index < len(_proxy_list):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            _proxy_stats[proxy_index]['last_used'] = time.time()
            return _proxy_list[proxy_index]
        
        # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–æ–∫—Å–∏, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫...")
        load_proxy_list()
        return None

def record_proxy_usage(proxy_url, weight=1, error=False):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    with _proxy_lock:
        if not _proxy_list:
            return
            
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø—Ä–æ–∫—Å–∏
        proxy_index = None
        for i, p_url in enumerate(_proxy_list):
            if p_url == proxy_url:
                proxy_index = i
                break
        
        if proxy_index is not None:
            if error:
                _proxy_balancer.record_error(proxy_index)
                _proxy_stats[proxy_index]['errors'] += 1
            else:
                _proxy_balancer.record_request(proxy_index, weight)
                _proxy_stats[proxy_index]['requests'] += 1
                _proxy_balancer.reset_errors(proxy_index)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ

def rotate_proxy():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–∫—Å–∏"""
    with _proxy_lock:
        if not _proxy_list:
            load_proxy_list()
        
        if _proxy_list:
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–∫—Å–∏
            for _ in range(len(_proxy_list)):
                proxy_index = _proxy_balancer.get_best_proxy()
                if proxy_index is not None:
                    current_proxy = _proxy_list[proxy_index]
                    print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ #{proxy_index + 1}")
                    return True
            
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏")
            return False
        
        return False

def get_proxy_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∫—Å–∏ —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏"""
    global _proxy_list, _proxy_stats, _proxy_balancer
    
    if not _proxy_list:
        load_proxy_list()
    
    detailed_stats = []
    current_time = time.time()
    
    for i, proxy_url in enumerate(_proxy_list):
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞
        _proxy_balancer.cleanup_old_records(i)
        
        # –ó–∞–ø—Ä–æ—Å—ã –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
        recent_requests = len(_proxy_balancer.proxy_requests[i])
        
        # –í–µ—Å –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
        current_weight = sum(
            weight for ts, weight in _proxy_balancer.proxy_weights[i]
            if current_time - ts < 60
        )
        
        # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        can_use = _proxy_balancer.can_use_proxy(i)
        
        # –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
        request_load = min(100, (recent_requests / (BINANCE_REQUEST_LIMIT * SAFE_MARGIN)) * 100)
        weight_load = min(100, (current_weight / (BINANCE_WEIGHT_LIMIT * SAFE_MARGIN)) * 100)
        
        proxy_stat = {
            'index': i,
            'url': proxy_url,
            'available': can_use,
            'requests_last_minute': recent_requests,
            'weight_last_minute': int(current_weight),
            'total_requests': _proxy_stats.get(i, {}).get('requests', 0),
            'total_errors': _proxy_balancer.proxy_errors[i],
            'request_load_percent': int(request_load),
            'weight_load_percent': int(weight_load),
            'last_used': _proxy_stats.get(i, {}).get('last_used')
        }
        detailed_stats.append(proxy_stat)
    
    return {
        'total': len(_proxy_list),
        'available_count': sum(1 for stat in detailed_stats if stat['available']),
        'current_proxy': get_current_proxy(),
        'limits': {
            'requests_per_second': int(BINANCE_REQUEST_LIMIT * SAFE_MARGIN),
            'weight_per_minute': int(BINANCE_WEIGHT_LIMIT * SAFE_MARGIN)
        },
        'detailed_stats': detailed_stats
    }

# –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–Ω–µ—Ç
EXCLUDED_COINS = {
    # Stablecoins
    'USDT', 'USDC', 'BUSD', 'DAI', 'TUSD', 'USDP', 'GUSD', 'USDD', 'FDUSD', 'USDS', 'FRAX', 'LUSD', 'MIM', 'USTC',
    # Exchange tokens  
    'BNB', 'CRO', 'FTT', 'HT', 'KCS', 'LEO', 'OKB', 'GT',
    # Wrapped tokens
    'WBTC', 'WETH', 'WBNB'
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
CACHE_FILE = 'top_coins_cache.json'
CACHE_HOURS = 6  # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
